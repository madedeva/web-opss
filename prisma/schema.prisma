// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// example model products
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   Int
}

// opss model
model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String?
  role               Role                 @relation(fields: [roleId], references: [id])
  roleId             Int
  password           String
  conId              Conference[]
  Con_Reviewer       Con_Reviewer[]
  RegisterConference RegisterConference[]
  Submission         Submission[]
  ReviewPaper        ReviewPaper[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Conference {
  id                  Int                  @id @default(autoincrement())
  name                String
  slug                String               @unique
  acronym             String
  theme               String
  description         String
  topic               String
  banner              String
  venue               String
  address             String
  city                String
  country             String
  email               String
  institution         String
  paper_template      String
  payment_info        String
  submission_deadline DateTime
  startDate           DateTime
  endDate             DateTime
  status              String
  User                User?                @relation(fields: [userId], references: [id])
  userId              Int
  Con_Reviewer        Con_Reviewer[]
  RegisterConference  RegisterConference[]
  Submission          Submission[]
}

model Con_Reviewer {
  id           Int        @id @default(autoincrement())
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
}

// additional model
model RegisterConference {
  id           Int          @id @default(autoincrement())
  conference   Conference   @relation(fields: [conferenceId], references: [id])
  conferenceId Int
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  country      String
  city         String
  status       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Submission   Submission[]
}

model Submission {
  id                   Int                @id @default(autoincrement())
  registerconference   RegisterConference @relation(fields: [registerconferenceId], references: [id])
  registerconferenceId Int
  user                 User               @relation(fields: [userId], references: [id])
  userId               Int
  title                String
  abstract             String
  keywords             String
  paper                String
  status               String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  Conference           Conference?        @relation(fields: [conferenceId], references: [id])
  conferenceId         Int?
  ReviewPaper          ReviewPaper[]
}

model ReviewPaper {
  id           Int        @id @default(autoincrement())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
  reviewer     User       @relation(fields: [reviewerId], references: [id])
  reviewerId   Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
